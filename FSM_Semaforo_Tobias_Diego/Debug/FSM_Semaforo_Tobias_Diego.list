
FSM_Semaforo_Tobias_Diego.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080016b4  080016b4  000026b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d8  080016d8  00003084  2**0
                  CONTENTS
  4 .ARM          00000000  080016d8  080016d8  00003084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d8  080016d8  00003084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d8  080016d8  000026d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016dc  080016dc  000026dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080016e0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000084  08001764  00003084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08001764  00003114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003add  00000000  00000000  000030ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000142b  00000000  00000000  00006b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004d0  00000000  00000000  00007fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000366  00000000  00000000  00008488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b21  00000000  00000000  000087ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000068df  00000000  00000000  0001f30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f8ea  00000000  00000000  00025bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a54d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001048  00000000  00000000  000a551c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000a6564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	0800169c 	.word	0x0800169c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	0800169c 	.word	0x0800169c

0800014c <timer_expired>:
//	if (valor == 0){
//		&blink_control->blink_state=valor;//No permite que el timer expire para cambiar de estado
//	}
//}
// Condition functions for state transitions
static int timer_expired(void *context) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	BlinkControl *blink_control = (BlinkControl *)context;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	60fb      	str	r3, [r7, #12]
//	if (Bandera_1==1)
//	{
		return timer_has_expired(&blink_control->blink_timer);
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	330c      	adds	r3, #12
 800015c:	4618      	mov	r0, r3
 800015e:	f000 fb5d 	bl	800081c <timer_has_expired>
 8000162:	4603      	mov	r3, r0
//	}
}
 8000164:	4618      	mov	r0, r3
 8000166:	3710      	adds	r7, #16
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}

0800016c <on_state_led_off>:

// on_state functions for each state
//En este apartado adapte los set y reset para la condicion de funcionamiento de los led
void on_state_led_off(void *context) {
 800016c:	b580      	push	{r7, lr}
 800016e:	b084      	sub	sp, #16
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	BlinkControl *blink_control = (BlinkControl *)context;
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(blink_control->LED_Port, blink_control->LED_Pin, GPIO_PIN_SET);  // Turn LED OFF
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	6958      	ldr	r0, [r3, #20]
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	8b1b      	ldrh	r3, [r3, #24]
 8000180:	2201      	movs	r2, #1
 8000182:	4619      	mov	r1, r3
 8000184:	f000 fe67 	bl	8000e56 <HAL_GPIO_WritePin>
	timer_restart(&blink_control->blink_timer);
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	330c      	adds	r3, #12
 800018c:	4618      	mov	r0, r3
 800018e:	f000 fb38 	bl	8000802 <timer_restart>
}
 8000192:	bf00      	nop
 8000194:	3710      	adds	r7, #16
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}

0800019a <on_state_led_on>:

void on_state_led_on(void *context) {
 800019a:	b580      	push	{r7, lr}
 800019c:	b084      	sub	sp, #16
 800019e:	af00      	add	r7, sp, #0
 80001a0:	6078      	str	r0, [r7, #4]
	BlinkControl *blink_control = (BlinkControl *)context;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(blink_control->LED_Port, blink_control->LED_Pin, GPIO_PIN_RESET);  // Turn LED ON
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	6958      	ldr	r0, [r3, #20]
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	8b1b      	ldrh	r3, [r3, #24]
 80001ae:	2200      	movs	r2, #0
 80001b0:	4619      	mov	r1, r3
 80001b2:	f000 fe50 	bl	8000e56 <HAL_GPIO_WritePin>
	timer_restart(&blink_control->blink_timer);
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	330c      	adds	r3, #12
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 fb21 	bl	8000802 <timer_restart>
}
 80001c0:	bf00      	nop
 80001c2:	3710      	adds	r7, #16
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}

080001c8 <blink_control_init>:
		{LEDOnTransitions, 1, on_state_led_on}              // LED_ON state

};

// Initialize the BlinkControl FSM
void blink_control_init(BlinkControl *blink_control, GPIO_TypeDef *LED_Port, uint16_t LED_Pin, uint32_t initial_period) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	603b      	str	r3, [r7, #0]
 80001d4:	4613      	mov	r3, r2
 80001d6:	80fb      	strh	r3, [r7, #6]
	fsm_init(&blink_control->fsm, BlinkFSMStates, LED_ON, blink_control);  // Initialize FSM starting at LED_OFF
 80001d8:	68f8      	ldr	r0, [r7, #12]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	2201      	movs	r2, #1
 80001de:	490b      	ldr	r1, [pc, #44]	@ (800020c <blink_control_init+0x44>)
 80001e0:	f000 f822 	bl	8000228 <fsm_init>
	blink_control->LED_Port = LED_Port;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	615a      	str	r2, [r3, #20]
	blink_control->LED_Pin = LED_Pin;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	88fa      	ldrh	r2, [r7, #6]
 80001ee:	831a      	strh	r2, [r3, #24]
	blink_control->blink_state=0;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	2200      	movs	r2, #0
 80001f4:	835a      	strh	r2, [r3, #26]
	timer_start(&blink_control->blink_timer, initial_period);  // Start blink timer
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	330c      	adds	r3, #12
 80001fa:	6839      	ldr	r1, [r7, #0]
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 faef 	bl	80007e0 <timer_start>

}
 8000202:	bf00      	nop
 8000204:	3710      	adds	r7, #16
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000010 	.word	0x20000010

08000210 <blink_control_update>:

// Update the FSM
void blink_control_update(BlinkControl *blink_control) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	fsm_update(&blink_control->fsm);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4618      	mov	r0, r3
 800021c:	f000 f819 	bl	8000252 <fsm_update>
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <fsm_init>:
#include "main.h"

/**
 * @brief Initializes the FSM with given states, initial state, and context.
 */
void fsm_init(FSM *fsm, const FSMState *states, unsigned long initial_state, void *context) {
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
 8000234:	603b      	str	r3, [r7, #0]
    fsm->states = states;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	68ba      	ldr	r2, [r7, #8]
 800023a:	601a      	str	r2, [r3, #0]
    fsm->currentState = initial_state;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	605a      	str	r2, [r3, #4]
    fsm->context = context;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	683a      	ldr	r2, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr

08000252 <fsm_update>:

/**
 * @brief Updates the FSM based on the conditions of the current state.
 */
void fsm_update(FSM *fsm) {
 8000252:	b580      	push	{r7, lr}
 8000254:	b08a      	sub	sp, #40	@ 0x28
 8000256:	af00      	add	r7, sp, #0
 8000258:	6078      	str	r0, [r7, #4]
    unsigned long oldState = fsm->currentState;  // Store the current state before checking transitions
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	623b      	str	r3, [r7, #32]
    FSMState currentState = fsm->states[fsm->currentState];
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	6819      	ldr	r1, [r3, #0]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	685a      	ldr	r2, [r3, #4]
 8000268:	4613      	mov	r3, r2
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	4413      	add	r3, r2
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	18ca      	adds	r2, r1, r3
 8000272:	f107 0314 	add.w	r3, r7, #20
 8000276:	ca07      	ldmia	r2, {r0, r1, r2}
 8000278:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Check all transitions (one for each of the potential next states)
    for (unsigned long i = 0; i < currentState.numTransitions; i++) {
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000280:	e016      	b.n	80002b0 <fsm_update+0x5e>
        if (currentState.transitions[i].condition(fsm->context)) {  // Pass the context to the condition function
 8000282:	697a      	ldr	r2, [r7, #20]
 8000284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000286:	00db      	lsls	r3, r3, #3
 8000288:	4413      	add	r3, r2
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	6892      	ldr	r2, [r2, #8]
 8000290:	4610      	mov	r0, r2
 8000292:	4798      	blx	r3
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d007      	beq.n	80002aa <fsm_update+0x58>
            fsm->currentState = currentState.transitions[i].nextState;  // Transition to the corresponding next state
 800029a:	697a      	ldr	r2, [r7, #20]
 800029c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800029e:	00db      	lsls	r3, r3, #3
 80002a0:	4413      	add	r3, r2
 80002a2:	685a      	ldr	r2, [r3, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	605a      	str	r2, [r3, #4]
            break;  // Exit after the first matched condition
 80002a8:	e006      	b.n	80002b8 <fsm_update+0x66>
    for (unsigned long i = 0; i < currentState.numTransitions; i++) {
 80002aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002ac:	3301      	adds	r3, #1
 80002ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80002b0:	69bb      	ldr	r3, [r7, #24]
 80002b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d3e4      	bcc.n	8000282 <fsm_update+0x30>
        }
    }

    // Check if the state has changed
    if (fsm->currentState != oldState) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	6a3a      	ldr	r2, [r7, #32]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d015      	beq.n	80002ee <fsm_update+0x9c>
        FSMState newState = fsm->states[fsm->currentState];
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	6819      	ldr	r1, [r3, #0]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	685a      	ldr	r2, [r3, #4]
 80002ca:	4613      	mov	r3, r2
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	4413      	add	r3, r2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	18ca      	adds	r2, r1, r3
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80002da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        if (newState.action) {
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d004      	beq.n	80002ee <fsm_update+0x9c>
            newState.action(fsm->context);  // Execute the action on state entry
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	6892      	ldr	r2, [r2, #8]
 80002ea:	4610      	mov	r0, r2
 80002ec:	4798      	blx	r3
        }
    }
}
 80002ee:	bf00      	nop
 80002f0:	3728      	adds	r7, #40	@ 0x28
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002fe:	f000 fac9 	bl	8000894 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000302:	f000 f82b 	bl	800035c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000306:	f000 f865 	bl	80003d4 <MX_GPIO_Init>
	//	debounced_switch_init(&debounced_button2, SW_2_GPIO_Port, SW_2_Pin);
	//	edge_detector_init(&edge_detector1, &debounced_button1);
	//	edge_detector_init(&edge_detector2, &debounced_button2);
	//	timer_period_manager_init(&period_manager1, &blink_control_led1.blink_timer, &edge_detector1);
	//	timer_period_manager_init(&period_manager2, &blink_control_led1.blink_timer, &edge_detector2);
	modulo_ejemplo_init(&proyecto1, LED_1_GPIO_Port, LED_1_Pin, LED_2_GPIO_Port, LED_2_Pin, SW_1_GPIO_Port, SW_1_Pin, SW_2_GPIO_Port, SW_2_Pin);
 800030a:	2340      	movs	r3, #64	@ 0x40
 800030c:	9304      	str	r3, [sp, #16]
 800030e:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <main+0x58>)
 8000310:	9303      	str	r3, [sp, #12]
 8000312:	2320      	movs	r3, #32
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <main+0x58>)
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <main+0x58>)
 8000322:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000326:	490b      	ldr	r1, [pc, #44]	@ (8000354 <main+0x5c>)
 8000328:	480b      	ldr	r0, [pc, #44]	@ (8000358 <main+0x60>)
 800032a:	f000 f993 	bl	8000654 <modulo_ejemplo_init>

	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000334:	4807      	ldr	r0, [pc, #28]	@ (8000354 <main+0x5c>)
 8000336:	f000 fd8e 	bl	8000e56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000340:	4803      	ldr	r0, [pc, #12]	@ (8000350 <main+0x58>)
 8000342:	f000 fd88 	bl	8000e56 <HAL_GPIO_WritePin>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		modulo_ejemplo_update(&proyecto1);
 8000346:	4804      	ldr	r0, [pc, #16]	@ (8000358 <main+0x60>)
 8000348:	f000 f9c6 	bl	80006d8 <modulo_ejemplo_update>
 800034c:	e7fb      	b.n	8000346 <main+0x4e>
 800034e:	bf00      	nop
 8000350:	40010c00 	.word	0x40010c00
 8000354:	40011000 	.word	0x40011000
 8000358:	200000a0 	.word	0x200000a0

0800035c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b090      	sub	sp, #64	@ 0x40
 8000360:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 0318 	add.w	r3, r7, #24
 8000366:	2228      	movs	r2, #40	@ 0x28
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f001 f96a 	bl	8001644 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037e:	2302      	movs	r3, #2
 8000380:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000382:	2301      	movs	r3, #1
 8000384:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000386:	2310      	movs	r3, #16
 8000388:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038a:	2300      	movs	r3, #0
 800038c:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fd78 	bl	8000e88 <HAL_RCC_OscConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x46>
	{
		Error_Handler();
 800039e:	f000 f887 	bl	80004b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	230f      	movs	r3, #15
 80003a4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 ffe6 	bl	800138c <HAL_RCC_ClockConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x6e>
	{
		Error_Handler();
 80003c6:	f000 f873 	bl	80004b0 <Error_Handler>
	}
}
 80003ca:	bf00      	nop
 80003cc:	3740      	adds	r7, #64	@ 0x40
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003e8:	4b2e      	ldr	r3, [pc, #184]	@ (80004a4 <MX_GPIO_Init+0xd0>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a2d      	ldr	r2, [pc, #180]	@ (80004a4 <MX_GPIO_Init+0xd0>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b2b      	ldr	r3, [pc, #172]	@ (80004a4 <MX_GPIO_Init+0xd0>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000400:	4b28      	ldr	r3, [pc, #160]	@ (80004a4 <MX_GPIO_Init+0xd0>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a27      	ldr	r2, [pc, #156]	@ (80004a4 <MX_GPIO_Init+0xd0>)
 8000406:	f043 0308 	orr.w	r3, r3, #8
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b25      	ldr	r3, [pc, #148]	@ (80004a4 <MX_GPIO_Init+0xd0>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0308 	and.w	r3, r3, #8
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b22      	ldr	r3, [pc, #136]	@ (80004a4 <MX_GPIO_Init+0xd0>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a21      	ldr	r2, [pc, #132]	@ (80004a4 <MX_GPIO_Init+0xd0>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b1f      	ldr	r3, [pc, #124]	@ (80004a4 <MX_GPIO_Init+0xd0>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000436:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <MX_GPIO_Init+0xd4>)
 8000438:	f000 fd0d 	bl	8000e56 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000442:	481a      	ldr	r0, [pc, #104]	@ (80004ac <MX_GPIO_Init+0xd8>)
 8000444:	f000 fd07 	bl	8000e56 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_1_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin;
 8000448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800044c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000456:	2302      	movs	r3, #2
 8000458:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	4811      	ldr	r0, [pc, #68]	@ (80004a8 <MX_GPIO_Init+0xd4>)
 8000462:	f000 fb5d 	bl	8000b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_2_Pin */
	GPIO_InitStruct.Pin = LED_2_Pin;
 8000466:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800046a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	2301      	movs	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	2302      	movs	r3, #2
 8000476:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	480b      	ldr	r0, [pc, #44]	@ (80004ac <MX_GPIO_Init+0xd8>)
 8000480:	f000 fb4e 	bl	8000b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_1_Pin SW_2_Pin */
	GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 8000484:	2360      	movs	r3, #96	@ 0x60
 8000486:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800048c:	2302      	movs	r3, #2
 800048e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	4805      	ldr	r0, [pc, #20]	@ (80004ac <MX_GPIO_Init+0xd8>)
 8000498:	f000 fb42 	bl	8000b20 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800049c:	bf00      	nop
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40011000 	.word	0x40011000
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <Error_Handler+0x8>

080004bc <condicion_estado1_a_estado2>:
 ***********************************************/

/**
 * @brief Condición para pasar del estado 1 al estado 2.
 */
static int condicion_estado1_a_estado2(void *context) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	// Esta operacion de casteo se hace para poder acceder a los
	// miembros de la estructura que define a nuestro modulo.
	ModuloEjemplo *ejemplo = (ModuloEjemplo *)context;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	60fb      	str	r3, [r7, #12]
	// Esta condición chequea que determinado pin se encuentre seteado
	return (HAL_GPIO_ReadPin(ejemplo->Port_sw2, ejemplo->sw2) == GPIO_PIN_SET || HAL_GPIO_ReadPin(ejemplo->Port_sw1, ejemplo->sw1) == GPIO_PIN_SET);
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80004d0:	4619      	mov	r1, r3
 80004d2:	4610      	mov	r0, r2
 80004d4:	f000 fca8 	bl	8000e28 <HAL_GPIO_ReadPin>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d00a      	beq.n	80004f4 <condicion_estado1_a_estado2+0x38>
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	69da      	ldr	r2, [r3, #28]
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	8c1b      	ldrh	r3, [r3, #32]
 80004e6:	4619      	mov	r1, r3
 80004e8:	4610      	mov	r0, r2
 80004ea:	f000 fc9d 	bl	8000e28 <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d101      	bne.n	80004f8 <condicion_estado1_a_estado2+0x3c>
 80004f4:	2301      	movs	r3, #1
 80004f6:	e000      	b.n	80004fa <condicion_estado1_a_estado2+0x3e>
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <condicion_timer_expired>:

/**
 * @brief Condición para pasar del estado 2 al estado 3, 3 a 4.
 */
static int condicion_timer_expired(void *context) {
 8000502:	b580      	push	{r7, lr}
 8000504:	b084      	sub	sp, #16
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
	ModuloEjemplo *ejemplo = (ModuloEjemplo *)context;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	60fb      	str	r3, [r7, #12]
	return timer_has_expired(&ejemplo->Modulo_ejemplo_timer);
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	332c      	adds	r3, #44	@ 0x2c
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f982 	bl	800081c <timer_has_expired>
 8000518:	4603      	mov	r3, r0
}
 800051a:	4618      	mov	r0, r3
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <on_state_estado1>:
 ***********************************************/

/**
 * @brief Acción al entrar en el estado 1.
 */
void on_state_estado1(void *context) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	ModuloEjemplo *ejemplo = (ModuloEjemplo *)context;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60fb      	str	r3, [r7, #12]
	// Ejemplo de acción: Cambiar el estado del pin GPIO a RESET
	HAL_GPIO_WritePin(ejemplo->Port_led1, ejemplo->Pin1, 1); //Rojo off
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	68d8      	ldr	r0, [r3, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	8a1b      	ldrh	r3, [r3, #16]
 8000538:	2201      	movs	r2, #1
 800053a:	4619      	mov	r1, r3
 800053c:	f000 fc8b 	bl	8000e56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ejemplo->Port_led2, ejemplo->Pin2, 0); //Verde on
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	6958      	ldr	r0, [r3, #20]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	8b1b      	ldrh	r3, [r3, #24]
 8000548:	2200      	movs	r2, #0
 800054a:	4619      	mov	r1, r3
 800054c:	f000 fc83 	bl	8000e56 <HAL_GPIO_WritePin>
	bandera=0;
 8000550:	4b03      	ldr	r3, [pc, #12]	@ (8000560 <on_state_estado1+0x3c>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200000d4 	.word	0x200000d4

08000564 <on_state_estado2>:
/**
 * @brief Acción al entrar en el estado 2.
 */
void on_state_estado2(void *context) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	ModuloEjemplo *ejemplo = (ModuloEjemplo *)context;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	60fb      	str	r3, [r7, #12]
	// Ejemplo de acción: Iniciar el timer asociado
	uwTick = 0;
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <on_state_estado2+0x40>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
	timer_start(&ejemplo->Modulo_ejemplo_timer, 1000); // Iniciar un timer de 1 segundos
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	332c      	adds	r3, #44	@ 0x2c
 800057a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f92e 	bl	80007e0 <timer_start>
	//Parpadeo
	blink_control_init(&blink_control_led2,ejemplo->Port_led2, ejemplo->Pin2, 200);
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	6959      	ldr	r1, [r3, #20]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	8b1a      	ldrh	r2, [r3, #24]
 800058c:	23c8      	movs	r3, #200	@ 0xc8
 800058e:	4806      	ldr	r0, [pc, #24]	@ (80005a8 <on_state_estado2+0x44>)
 8000590:	f7ff fe1a 	bl	80001c8 <blink_control_init>
	bandera=1;
 8000594:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <on_state_estado2+0x48>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000110 	.word	0x20000110
 80005a8:	200000f4 	.word	0x200000f4
 80005ac:	200000d4 	.word	0x200000d4

080005b0 <on_state_estado3>:

void on_state_estado3(void *context) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	ModuloEjemplo *ejemplo = (ModuloEjemplo *)context;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
	// Ejemplo de acción: Iniciar el timer asociado
	uwTick = 0;
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <on_state_estado3+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
	timer_start(&ejemplo->Modulo_ejemplo_timer, 3000); // Iniciar un timer de 1 segundos
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	332c      	adds	r3, #44	@ 0x2c
 80005c6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f908 	bl	80007e0 <timer_start>
	HAL_GPIO_WritePin(ejemplo->Port_led1, ejemplo->Pin1, 0); //Rojo on
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	68d8      	ldr	r0, [r3, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	8a1b      	ldrh	r3, [r3, #16]
 80005d8:	2200      	movs	r2, #0
 80005da:	4619      	mov	r1, r3
 80005dc:	f000 fc3b 	bl	8000e56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ejemplo->Port_led2, ejemplo->Pin2, 1); //Verde off
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	6958      	ldr	r0, [r3, #20]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	8b1b      	ldrh	r3, [r3, #24]
 80005e8:	2201      	movs	r2, #1
 80005ea:	4619      	mov	r1, r3
 80005ec:	f000 fc33 	bl	8000e56 <HAL_GPIO_WritePin>
	bandera=0;
 80005f0:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <on_state_estado3+0x54>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000110 	.word	0x20000110
 8000604:	200000d4 	.word	0x200000d4

08000608 <on_state_estado4>:
void on_state_estado4(void *context) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	ModuloEjemplo *ejemplo = (ModuloEjemplo *)context;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	60fb      	str	r3, [r7, #12]
	// Ejemplo de acción: Iniciar el timer asociado
	uwTick = 0;
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <on_state_estado4+0x40>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
	timer_start(&ejemplo->Modulo_ejemplo_timer, 1000);// Iniciar un timer de 1 segundos
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	332c      	adds	r3, #44	@ 0x2c
 800061e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f8dc 	bl	80007e0 <timer_start>
	blink_control_init(&blink_control_led1, ejemplo->Port_led1, ejemplo->Pin1, 200);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	68d9      	ldr	r1, [r3, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	8a1a      	ldrh	r2, [r3, #16]
 8000630:	23c8      	movs	r3, #200	@ 0xc8
 8000632:	4806      	ldr	r0, [pc, #24]	@ (800064c <on_state_estado4+0x44>)
 8000634:	f7ff fdc8 	bl	80001c8 <blink_control_init>
	bandera=2;
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <on_state_estado4+0x48>)
 800063a:	2202      	movs	r2, #2
 800063c:	701a      	strb	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000110 	.word	0x20000110
 800064c:	200000d8 	.word	0x200000d8
 8000650:	200000d4 	.word	0x200000d4

08000654 <modulo_ejemplo_init>:

/**
 * @brief Inicializa el módulo.
 */
void modulo_ejemplo_init(ModuloEjemplo *ejemplo, GPIO_TypeDef *Port_led1, uint16_t Pin1, GPIO_TypeDef *Port_led2, uint16_t Pin2,GPIO_TypeDef *Port_sw1, uint16_t sw1, GPIO_TypeDef *Port_sw2, uint16_t sw2)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4613      	mov	r3, r2
 8000662:	80fb      	strh	r3, [r7, #6]
	// Iniciar la FSM en el estado 1
	fsm_init(&ejemplo->fsm, ModuloEjemploEstados, ESTADO_1, ejemplo);
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2200      	movs	r2, #0
 800066a:	491a      	ldr	r1, [pc, #104]	@ (80006d4 <modulo_ejemplo_init+0x80>)
 800066c:	f7ff fddc 	bl	8000228 <fsm_init>
	// Inicializar el puerto y pin GPIO
	ejemplo->Port_led1 = Port_led1;     // Puerto GPIO (si fuese necesario)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	60da      	str	r2, [r3, #12]
	ejemplo->Pin1 = Pin1;           // Pin GPIO (si fuese necesario)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	88fa      	ldrh	r2, [r7, #6]
 800067a:	821a      	strh	r2, [r3, #16]
	ejemplo->Port_led2 = Port_led2 ;     // Puerto GPIO (si fuese necesario)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	615a      	str	r2, [r3, #20]
	ejemplo->Pin2 = Pin2;           // Pin GPIO (si fuese necesario)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	8b3a      	ldrh	r2, [r7, #24]
 8000686:	831a      	strh	r2, [r3, #24]
	ejemplo->Port_sw1 = Port_sw1;     // Puerto GPIO (si fuese necesario)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	69fa      	ldr	r2, [r7, #28]
 800068c:	61da      	str	r2, [r3, #28]
	ejemplo->sw1 = sw1;           // Pin GPIO (si fuese necesario)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	8c3a      	ldrh	r2, [r7, #32]
 8000692:	841a      	strh	r2, [r3, #32]
	ejemplo->Port_sw2=Port_sw2;     // Puerto GPIO (si fuese necesario)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24
	ejemplo->sw2 = sw2;           // Pin GPIO (si fuese necesario)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800069e:	851a      	strh	r2, [r3, #40]	@ 0x28

	// Inicializar otros recursos (si es necesario)
	//Inicializo los puertos, porque para el inicio como se ejecuta primero el init y luego se
	//definen los puertos no ejecuta el estado inicial porque no sabe los puertos
	HAL_GPIO_WritePin(ejemplo->Port_led1, ejemplo->Pin1, 1); //Rojo off
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	68d8      	ldr	r0, [r3, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	8a1b      	ldrh	r3, [r3, #16]
 80006a8:	2201      	movs	r2, #1
 80006aa:	4619      	mov	r1, r3
 80006ac:	f000 fbd3 	bl	8000e56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ejemplo->Port_led2, ejemplo->Pin2, 0); //Verde on
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	6958      	ldr	r0, [r3, #20]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	8b1b      	ldrh	r3, [r3, #24]
 80006b8:	2200      	movs	r2, #0
 80006ba:	4619      	mov	r1, r3
 80006bc:	f000 fbcb 	bl	8000e56 <HAL_GPIO_WritePin>

	timer_start(&ejemplo->Modulo_ejemplo_timer, 200);  // Start modulo ejemplo timer
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	332c      	adds	r3, #44	@ 0x2c
 80006c4:	21c8      	movs	r1, #200	@ 0xc8
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f88a 	bl	80007e0 <timer_start>

}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000048 	.word	0x20000048

080006d8 <modulo_ejemplo_update>:
 ***********************************************/

/**
 * @brief Actualiza el módulo.
 */
void modulo_ejemplo_update(ModuloEjemplo *ejemplo) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	fsm_update(&ejemplo->fsm);  // Llamar a fsm_update para gestionar las transiciones
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fdb5 	bl	8000252 <fsm_update>

	//Condiciones de actualizacion del blink control si estan en el estado de parpadeo
	if (bandera==1){
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <modulo_ejemplo_update+0x34>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d102      	bne.n	80006f6 <modulo_ejemplo_update+0x1e>
		//Blink control led verde
		blink_control_update(&blink_control_led2);
 80006f0:	4807      	ldr	r0, [pc, #28]	@ (8000710 <modulo_ejemplo_update+0x38>)
 80006f2:	f7ff fd8d 	bl	8000210 <blink_control_update>
	}
	if(bandera==2){
 80006f6:	4b05      	ldr	r3, [pc, #20]	@ (800070c <modulo_ejemplo_update+0x34>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d102      	bne.n	8000704 <modulo_ejemplo_update+0x2c>
		//Blink control led Rojo
		blink_control_update(&blink_control_led1);
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <modulo_ejemplo_update+0x3c>)
 8000700:	f7ff fd86 	bl	8000210 <blink_control_update>
	}
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000d4 	.word	0x200000d4
 8000710:	200000f4 	.word	0x200000f4
 8000714:	200000d8 	.word	0x200000d8

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <HAL_MspInit+0x5c>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a14      	ldr	r2, [pc, #80]	@ (8000774 <HAL_MspInit+0x5c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_MspInit+0x5c>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <HAL_MspInit+0x5c>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a0e      	ldr	r2, [pc, #56]	@ (8000774 <HAL_MspInit+0x5c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <HAL_MspInit+0x5c>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800074e:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <HAL_MspInit+0x60>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	4a04      	ldr	r2, [pc, #16]	@ (8000778 <HAL_MspInit+0x60>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000
 8000778:	40010000 	.word	0x40010000

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <NMI_Handler+0x4>

08000784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <MemManage_Handler+0x4>

08000794 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f8a8 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <timer_start>:
#include "timer.h"

/**
 * @brief Starts a timer for the specified duration in milliseconds.
 */
void timer_start(Timer *timer, uint32_t duration_ms) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
    timer->start_tick = HAL_GetTick();    // Store the current tick
 80007ea:	f000 f8ab 	bl	8000944 <HAL_GetTick>
 80007ee:	4602      	mov	r2, r0
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	601a      	str	r2, [r3, #0]
    timer->duration_ms = duration_ms; // Set the timeout duration
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	605a      	str	r2, [r3, #4]
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <timer_restart>:

/**
 * @brief Restarts a timer.
 */
void timer_restart(Timer *timer) {
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
    timer->start_tick = HAL_GetTick();
 800080a:	f000 f89b 	bl	8000944 <HAL_GetTick>
 800080e:	4602      	mov	r2, r0
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <timer_has_expired>:
/**
 * @brief Checks if the timer has expired.
 *
 * @return 1 if the timer has expired, 0 if not.
 */
int timer_has_expired(Timer *timer) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
    return (HAL_GetTick() - timer->start_tick >= timer->duration_ms);
 8000824:	f000 f88e 	bl	8000944 <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	1ad2      	subs	r2, r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	429a      	cmp	r2, r3
 8000836:	bf2c      	ite	cs
 8000838:	2301      	movcs	r3, #1
 800083a:	2300      	movcc	r3, #0
 800083c:	b2db      	uxtb	r3, r3
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000848:	f7ff ffc4 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480b      	ldr	r0, [pc, #44]	@ (800087c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800084e:	490c      	ldr	r1, [pc, #48]	@ (8000880 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000850:	4a0c      	ldr	r2, [pc, #48]	@ (8000884 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a09      	ldr	r2, [pc, #36]	@ (8000888 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000864:	4c09      	ldr	r4, [pc, #36]	@ (800088c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000872:	f000 feef 	bl	8001654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff fd3f 	bl	80002f8 <main>
  bx lr
 800087a:	4770      	bx	lr
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000884:	080016e0 	.word	0x080016e0
  ldr r2, =_sbss
 8000888:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800088c:	20000114 	.word	0x20000114

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>
	...

08000894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <HAL_Init+0x28>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <HAL_Init+0x28>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f907 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	200f      	movs	r0, #15
 80008ac:	f000 f808 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f7ff ff32 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_InitTick+0x54>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_InitTick+0x58>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f911 	bl	8000b06 <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f8e7 	bl	8000ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	@ (800091c <HAL_InitTick+0x5c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000078 	.word	0x20000078
 8000918:	20000080 	.word	0x20000080
 800091c:	2000007c 	.word	0x2000007c

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <HAL_IncTick+0x1c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <HAL_IncTick+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a03      	ldr	r2, [pc, #12]	@ (8000940 <HAL_IncTick+0x20>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20000080 	.word	0x20000080
 8000940:	20000110 	.word	0x20000110

08000944 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b02      	ldr	r3, [pc, #8]	@ (8000954 <HAL_GetTick+0x10>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000110 	.word	0x20000110

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	@ (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db0a      	blt.n	80009e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	@ (8000a08 <__NVIC_SetPriority+0x4c>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	440b      	add	r3, r1
 80009e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e4:	e00a      	b.n	80009fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4908      	ldr	r1, [pc, #32]	@ (8000a0c <__NVIC_SetPriority+0x50>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	3b04      	subs	r3, #4
 80009f4:	0112      	lsls	r2, r2, #4
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	440b      	add	r3, r1
 80009fa:	761a      	strb	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	@ 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f1c3 0307 	rsb	r3, r3, #7
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	bf28      	it	cs
 8000a2e:	2304      	movcs	r3, #4
 8000a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3304      	adds	r3, #4
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	d902      	bls.n	8000a40 <NVIC_EncodePriority+0x30>
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	e000      	b.n	8000a42 <NVIC_EncodePriority+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	401a      	ands	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43d9      	mvns	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	4313      	orrs	r3, r2
         );
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3724      	adds	r7, #36	@ 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a84:	d301      	bcc.n	8000a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00f      	b.n	8000aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a92:	210f      	movs	r1, #15
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f7ff ff90 	bl	80009bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <SysTick_Config+0x40>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff49 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae0:	f7ff ff5e 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	6978      	ldr	r0, [r7, #20]
 8000aec:	f7ff ff90 	bl	8000a10 <NVIC_EncodePriority>
 8000af0:	4602      	mov	r2, r0
 8000af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff5f 	bl	80009bc <__NVIC_SetPriority>
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ffb0 	bl	8000a74 <SysTick_Config>
 8000b14:	4603      	mov	r3, r0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b08b      	sub	sp, #44	@ 0x2c
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b32:	e169      	b.n	8000e08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b34:	2201      	movs	r2, #1
 8000b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	69fa      	ldr	r2, [r7, #28]
 8000b44:	4013      	ands	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	f040 8158 	bne.w	8000e02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	4a9a      	ldr	r2, [pc, #616]	@ (8000dc0 <HAL_GPIO_Init+0x2a0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d05e      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b5c:	4a98      	ldr	r2, [pc, #608]	@ (8000dc0 <HAL_GPIO_Init+0x2a0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d875      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b62:	4a98      	ldr	r2, [pc, #608]	@ (8000dc4 <HAL_GPIO_Init+0x2a4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d058      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b68:	4a96      	ldr	r2, [pc, #600]	@ (8000dc4 <HAL_GPIO_Init+0x2a4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d86f      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b6e:	4a96      	ldr	r2, [pc, #600]	@ (8000dc8 <HAL_GPIO_Init+0x2a8>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d052      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b74:	4a94      	ldr	r2, [pc, #592]	@ (8000dc8 <HAL_GPIO_Init+0x2a8>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d869      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b7a:	4a94      	ldr	r2, [pc, #592]	@ (8000dcc <HAL_GPIO_Init+0x2ac>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d04c      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b80:	4a92      	ldr	r2, [pc, #584]	@ (8000dcc <HAL_GPIO_Init+0x2ac>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d863      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b86:	4a92      	ldr	r2, [pc, #584]	@ (8000dd0 <HAL_GPIO_Init+0x2b0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d046      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b8c:	4a90      	ldr	r2, [pc, #576]	@ (8000dd0 <HAL_GPIO_Init+0x2b0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d85d      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b92:	2b12      	cmp	r3, #18
 8000b94:	d82a      	bhi.n	8000bec <HAL_GPIO_Init+0xcc>
 8000b96:	2b12      	cmp	r3, #18
 8000b98:	d859      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba0 <HAL_GPIO_Init+0x80>)
 8000b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba0:	08000c1b 	.word	0x08000c1b
 8000ba4:	08000bf5 	.word	0x08000bf5
 8000ba8:	08000c07 	.word	0x08000c07
 8000bac:	08000c49 	.word	0x08000c49
 8000bb0:	08000c4f 	.word	0x08000c4f
 8000bb4:	08000c4f 	.word	0x08000c4f
 8000bb8:	08000c4f 	.word	0x08000c4f
 8000bbc:	08000c4f 	.word	0x08000c4f
 8000bc0:	08000c4f 	.word	0x08000c4f
 8000bc4:	08000c4f 	.word	0x08000c4f
 8000bc8:	08000c4f 	.word	0x08000c4f
 8000bcc:	08000c4f 	.word	0x08000c4f
 8000bd0:	08000c4f 	.word	0x08000c4f
 8000bd4:	08000c4f 	.word	0x08000c4f
 8000bd8:	08000c4f 	.word	0x08000c4f
 8000bdc:	08000c4f 	.word	0x08000c4f
 8000be0:	08000c4f 	.word	0x08000c4f
 8000be4:	08000bfd 	.word	0x08000bfd
 8000be8:	08000c11 	.word	0x08000c11
 8000bec:	4a79      	ldr	r2, [pc, #484]	@ (8000dd4 <HAL_GPIO_Init+0x2b4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d013      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bf2:	e02c      	b.n	8000c4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e029      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	3304      	adds	r3, #4
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e024      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	3308      	adds	r3, #8
 8000c0c:	623b      	str	r3, [r7, #32]
          break;
 8000c0e:	e01f      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	330c      	adds	r3, #12
 8000c16:	623b      	str	r3, [r7, #32]
          break;
 8000c18:	e01a      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c22:	2304      	movs	r3, #4
 8000c24:	623b      	str	r3, [r7, #32]
          break;
 8000c26:	e013      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d105      	bne.n	8000c3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c30:	2308      	movs	r3, #8
 8000c32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	611a      	str	r2, [r3, #16]
          break;
 8000c3a:	e009      	b.n	8000c50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	615a      	str	r2, [r3, #20]
          break;
 8000c46:	e003      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
          break;
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          break;
 8000c4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	2bff      	cmp	r3, #255	@ 0xff
 8000c54:	d801      	bhi.n	8000c5a <HAL_GPIO_Init+0x13a>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	e001      	b.n	8000c5e <HAL_GPIO_Init+0x13e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	2bff      	cmp	r3, #255	@ 0xff
 8000c64:	d802      	bhi.n	8000c6c <HAL_GPIO_Init+0x14c>
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x152>
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6e:	3b08      	subs	r3, #8
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	210f      	movs	r1, #15
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	401a      	ands	r2, r3
 8000c84:	6a39      	ldr	r1, [r7, #32]
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 80b1 	beq.w	8000e02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8000dd8 <HAL_GPIO_Init+0x2b8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a4c      	ldr	r2, [pc, #304]	@ (8000dd8 <HAL_GPIO_Init+0x2b8>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd8 <HAL_GPIO_Init+0x2b8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cb8:	4a48      	ldr	r2, [pc, #288]	@ (8000ddc <HAL_GPIO_Init+0x2bc>)
 8000cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a40      	ldr	r2, [pc, #256]	@ (8000de0 <HAL_GPIO_Init+0x2c0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d013      	beq.n	8000d0c <HAL_GPIO_Init+0x1ec>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3f      	ldr	r2, [pc, #252]	@ (8000de4 <HAL_GPIO_Init+0x2c4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d00d      	beq.n	8000d08 <HAL_GPIO_Init+0x1e8>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a3e      	ldr	r2, [pc, #248]	@ (8000de8 <HAL_GPIO_Init+0x2c8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d007      	beq.n	8000d04 <HAL_GPIO_Init+0x1e4>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a3d      	ldr	r2, [pc, #244]	@ (8000dec <HAL_GPIO_Init+0x2cc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d101      	bne.n	8000d00 <HAL_GPIO_Init+0x1e0>
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e006      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d00:	2304      	movs	r3, #4
 8000d02:	e004      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d04:	2302      	movs	r3, #2
 8000d06:	e002      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d10:	f002 0203 	and.w	r2, r2, #3
 8000d14:	0092      	lsls	r2, r2, #2
 8000d16:	4093      	lsls	r3, r2
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d1e:	492f      	ldr	r1, [pc, #188]	@ (8000ddc <HAL_GPIO_Init+0x2bc>)
 8000d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	3302      	adds	r3, #2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d006      	beq.n	8000d46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d38:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	492c      	ldr	r1, [pc, #176]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	608b      	str	r3, [r1, #8]
 8000d44:	e006      	b.n	8000d54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	4928      	ldr	r1, [pc, #160]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d60:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	4922      	ldr	r1, [pc, #136]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60cb      	str	r3, [r1, #12]
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d6e:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	491e      	ldr	r1, [pc, #120]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d88:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	4918      	ldr	r1, [pc, #96]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d96:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4914      	ldr	r1, [pc, #80]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d021      	beq.n	8000df4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	490e      	ldr	r1, [pc, #56]	@ (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	600b      	str	r3, [r1, #0]
 8000dbc:	e021      	b.n	8000e02 <HAL_GPIO_Init+0x2e2>
 8000dbe:	bf00      	nop
 8000dc0:	10320000 	.word	0x10320000
 8000dc4:	10310000 	.word	0x10310000
 8000dc8:	10220000 	.word	0x10220000
 8000dcc:	10210000 	.word	0x10210000
 8000dd0:	10120000 	.word	0x10120000
 8000dd4:	10110000 	.word	0x10110000
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40010c00 	.word	0x40010c00
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40011400 	.word	0x40011400
 8000df0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000df4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <HAL_GPIO_Init+0x304>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	4909      	ldr	r1, [pc, #36]	@ (8000e24 <HAL_GPIO_Init+0x304>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e04:	3301      	adds	r3, #1
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f47f ae8e 	bne.w	8000b34 <HAL_GPIO_Init+0x14>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	372c      	adds	r7, #44	@ 0x2c
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	40010400 	.word	0x40010400

08000e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e001      	b.n	8000e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	807b      	strh	r3, [r7, #2]
 8000e62:	4613      	mov	r3, r2
 8000e64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e66:	787b      	ldrb	r3, [r7, #1]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6c:	887a      	ldrh	r2, [r7, #2]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e72:	e003      	b.n	8000e7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	041a      	lsls	r2, r3, #16
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	611a      	str	r2, [r3, #16]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e272      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8087 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea8:	4b92      	ldr	r3, [pc, #584]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d00c      	beq.n	8000ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb4:	4b8f      	ldr	r3, [pc, #572]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d112      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x5e>
 8000ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ece:	4b89      	ldr	r3, [pc, #548]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d06c      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x12c>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d168      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e24c      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eee:	d106      	bne.n	8000efe <HAL_RCC_OscConfig+0x76>
 8000ef0:	4b80      	ldr	r3, [pc, #512]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a7f      	ldr	r2, [pc, #508]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e02e      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x98>
 8000f06:	4b7b      	ldr	r3, [pc, #492]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a7a      	ldr	r2, [pc, #488]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b78      	ldr	r3, [pc, #480]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a77      	ldr	r2, [pc, #476]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e01d      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0xbc>
 8000f2a:	4b72      	ldr	r3, [pc, #456]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a71      	ldr	r2, [pc, #452]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b6f      	ldr	r3, [pc, #444]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a6e      	ldr	r2, [pc, #440]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e00b      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f44:	4b6b      	ldr	r3, [pc, #428]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a6a      	ldr	r2, [pc, #424]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b68      	ldr	r3, [pc, #416]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a67      	ldr	r2, [pc, #412]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fcee 	bl	8000944 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fcea 	bl	8000944 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	@ 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e200      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0xe4>
 8000f8a:	e014      	b.n	8000fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fcda 	bl	8000944 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fcd6 	bl	8000944 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	@ 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e1ec      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	4b53      	ldr	r3, [pc, #332]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x10c>
 8000fb2:	e000      	b.n	8000fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d063      	beq.n	800108a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fce:	4b49      	ldr	r3, [pc, #292]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d11c      	bne.n	8001014 <HAL_RCC_OscConfig+0x18c>
 8000fda:	4b46      	ldr	r3, [pc, #280]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d116      	bne.n	8001014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe6:	4b43      	ldr	r3, [pc, #268]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <HAL_RCC_OscConfig+0x176>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d001      	beq.n	8000ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e1c0      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4939      	ldr	r1, [pc, #228]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001012:	e03a      	b.n	800108a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d020      	beq.n	800105e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800101c:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <HAL_RCC_OscConfig+0x270>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fc8f 	bl	8000944 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102a:	f7ff fc8b 	bl	8000944 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e1a1      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001048:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4927      	ldr	r1, [pc, #156]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
 800105c:	e015      	b.n	800108a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105e:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <HAL_RCC_OscConfig+0x270>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fc6e 	bl	8000944 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106c:	f7ff fc6a 	bl	8000944 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e180      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b00      	cmp	r3, #0
 8001094:	d03a      	beq.n	800110c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d019      	beq.n	80010d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_RCC_OscConfig+0x274>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a4:	f7ff fc4e 	bl	8000944 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc4a 	bl	8000944 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e160      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010be:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 fa9c 	bl	8001608 <RCC_Delay>
 80010d0:	e01c      	b.n	800110c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <HAL_RCC_OscConfig+0x274>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fc34 	bl	8000944 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010de:	e00f      	b.n	8001100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fc30 	bl	8000944 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d908      	bls.n	8001100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e146      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	42420000 	.word	0x42420000
 80010fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	4b92      	ldr	r3, [pc, #584]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e9      	bne.n	80010e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a6 	beq.w	8001266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111e:	4b8b      	ldr	r3, [pc, #556]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10d      	bne.n	8001146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b88      	ldr	r3, [pc, #544]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a87      	ldr	r2, [pc, #540]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b85      	ldr	r3, [pc, #532]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001142:	2301      	movs	r3, #1
 8001144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001146:	4b82      	ldr	r3, [pc, #520]	@ (8001350 <HAL_RCC_OscConfig+0x4c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800114e:	2b00      	cmp	r3, #0
 8001150:	d118      	bne.n	8001184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001152:	4b7f      	ldr	r3, [pc, #508]	@ (8001350 <HAL_RCC_OscConfig+0x4c8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a7e      	ldr	r2, [pc, #504]	@ (8001350 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800115c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800115e:	f7ff fbf1 	bl	8000944 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001166:	f7ff fbed 	bl	8000944 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b64      	cmp	r3, #100	@ 0x64
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e103      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	4b75      	ldr	r3, [pc, #468]	@ (8001350 <HAL_RCC_OscConfig+0x4c8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x312>
 800118c:	4b6f      	ldr	r3, [pc, #444]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4a6e      	ldr	r2, [pc, #440]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6213      	str	r3, [r2, #32]
 8001198:	e02d      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x334>
 80011a2:	4b6a      	ldr	r3, [pc, #424]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a69      	ldr	r2, [pc, #420]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	6213      	str	r3, [r2, #32]
 80011ae:	4b67      	ldr	r3, [pc, #412]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a66      	ldr	r2, [pc, #408]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6213      	str	r3, [r2, #32]
 80011ba:	e01c      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d10c      	bne.n	80011de <HAL_RCC_OscConfig+0x356>
 80011c4:	4b61      	ldr	r3, [pc, #388]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4a60      	ldr	r2, [pc, #384]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6213      	str	r3, [r2, #32]
 80011d0:	4b5e      	ldr	r3, [pc, #376]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a5d      	ldr	r2, [pc, #372]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	e00b      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 80011de:	4b5b      	ldr	r3, [pc, #364]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a5a      	ldr	r2, [pc, #360]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	6213      	str	r3, [r2, #32]
 80011ea:	4b58      	ldr	r3, [pc, #352]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4a57      	ldr	r2, [pc, #348]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	f023 0304 	bic.w	r3, r3, #4
 80011f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d015      	beq.n	800122a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fba1 	bl	8000944 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001204:	e00a      	b.n	800121c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001206:	f7ff fb9d 	bl	8000944 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001214:	4293      	cmp	r3, r2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e0b1      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	4b4b      	ldr	r3, [pc, #300]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0ee      	beq.n	8001206 <HAL_RCC_OscConfig+0x37e>
 8001228:	e014      	b.n	8001254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fb8b 	bl	8000944 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001232:	f7ff fb87 	bl	8000944 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e09b      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	4b40      	ldr	r3, [pc, #256]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1ee      	bne.n	8001232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d105      	bne.n	8001266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125a:	4b3c      	ldr	r3, [pc, #240]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a3b      	ldr	r2, [pc, #236]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8087 	beq.w	800137e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001270:	4b36      	ldr	r3, [pc, #216]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b08      	cmp	r3, #8
 800127a:	d061      	beq.n	8001340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d146      	bne.n	8001312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001284:	4b33      	ldr	r3, [pc, #204]	@ (8001354 <HAL_RCC_OscConfig+0x4cc>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128a:	f7ff fb5b 	bl	8000944 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff fb57 	bl	8000944 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e06d      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a4:	4b29      	ldr	r3, [pc, #164]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f0      	bne.n	8001292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b8:	d108      	bne.n	80012cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ba:	4b24      	ldr	r3, [pc, #144]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	4921      	ldr	r1, [pc, #132]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012cc:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a19      	ldr	r1, [r3, #32]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012dc:	430b      	orrs	r3, r1
 80012de:	491b      	ldr	r1, [pc, #108]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <HAL_RCC_OscConfig+0x4cc>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff fb2b 	bl	8000944 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff fb27 	bl	8000944 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e03d      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x46a>
 8001310:	e035      	b.n	800137e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <HAL_RCC_OscConfig+0x4cc>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fb14 	bl	8000944 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fb10 	bl	8000944 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e026      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x498>
 800133e:	e01e      	b.n	800137e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d107      	bne.n	8001358 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e019      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
 800134c:	40021000 	.word	0x40021000
 8001350:	40007000 	.word	0x40007000
 8001354:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <HAL_RCC_OscConfig+0x500>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	429a      	cmp	r2, r3
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001376:	429a      	cmp	r2, r3
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000

0800138c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0d0      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a0:	4b6a      	ldr	r3, [pc, #424]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d910      	bls.n	80013d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ae:	4b67      	ldr	r3, [pc, #412]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 0207 	bic.w	r2, r3, #7
 80013b6:	4965      	ldr	r1, [pc, #404]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013be:	4b63      	ldr	r3, [pc, #396]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0b8      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e8:	4b59      	ldr	r3, [pc, #356]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a58      	ldr	r2, [pc, #352]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80013f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001400:	4b53      	ldr	r3, [pc, #332]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a52      	ldr	r2, [pc, #328]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800140a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800140c:	4b50      	ldr	r3, [pc, #320]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	494d      	ldr	r1, [pc, #308]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d040      	beq.n	80014ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	4b47      	ldr	r3, [pc, #284]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d115      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e07f      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d107      	bne.n	800145a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144a:	4b41      	ldr	r3, [pc, #260]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e073      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145a:	4b3d      	ldr	r3, [pc, #244]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e06b      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146a:	4b39      	ldr	r3, [pc, #228]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f023 0203 	bic.w	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4936      	ldr	r1, [pc, #216]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800147c:	f7ff fa62 	bl	8000944 <HAL_GetTick>
 8001480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	e00a      	b.n	800149a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001484:	f7ff fa5e 	bl	8000944 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e053      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 020c 	and.w	r2, r3, #12
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d1eb      	bne.n	8001484 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d210      	bcs.n	80014dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b24      	ldr	r3, [pc, #144]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 0207 	bic.w	r2, r3, #7
 80014c2:	4922      	ldr	r1, [pc, #136]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e032      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e8:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	4916      	ldr	r1, [pc, #88]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	490e      	ldr	r1, [pc, #56]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151a:	f000 f821 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 800151e:	4602      	mov	r2, r0
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	490a      	ldr	r1, [pc, #40]	@ (8001554 <HAL_RCC_ClockConfig+0x1c8>)
 800152c:	5ccb      	ldrb	r3, [r1, r3]
 800152e:	fa22 f303 	lsr.w	r3, r2, r3
 8001532:	4a09      	ldr	r2, [pc, #36]	@ (8001558 <HAL_RCC_ClockConfig+0x1cc>)
 8001534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_RCC_ClockConfig+0x1d0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f9c0 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000
 8001550:	40021000 	.word	0x40021000
 8001554:	080016b4 	.word	0x080016b4
 8001558:	20000078 	.word	0x20000078
 800155c:	2000007c 	.word	0x2000007c

08001560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b04      	cmp	r3, #4
 8001588:	d002      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0x30>
 800158a:	2b08      	cmp	r3, #8
 800158c:	d003      	beq.n	8001596 <HAL_RCC_GetSysClockFreq+0x36>
 800158e:	e027      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001592:	613b      	str	r3, [r7, #16]
      break;
 8001594:	e027      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	0c9b      	lsrs	r3, r3, #18
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	4a17      	ldr	r2, [pc, #92]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d010      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	0c5b      	lsrs	r3, r3, #17
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	4a11      	ldr	r2, [pc, #68]	@ (8001600 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015ba:	5cd3      	ldrb	r3, [r2, r3]
 80015bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e004      	b.n	80015da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001604 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	613b      	str	r3, [r7, #16]
      break;
 80015de:	e002      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e0:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015e2:	613b      	str	r3, [r7, #16]
      break;
 80015e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015e6:	693b      	ldr	r3, [r7, #16]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	007a1200 	.word	0x007a1200
 80015fc:	080016c4 	.word	0x080016c4
 8001600:	080016d4 	.word	0x080016d4
 8001604:	003d0900 	.word	0x003d0900

08001608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001610:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <RCC_Delay+0x34>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <RCC_Delay+0x38>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0a5b      	lsrs	r3, r3, #9
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001624:	bf00      	nop
  }
  while (Delay --);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	60fa      	str	r2, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f9      	bne.n	8001624 <RCC_Delay+0x1c>
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000078 	.word	0x20000078
 8001640:	10624dd3 	.word	0x10624dd3

08001644 <memset>:
 8001644:	4603      	mov	r3, r0
 8001646:	4402      	add	r2, r0
 8001648:	4293      	cmp	r3, r2
 800164a:	d100      	bne.n	800164e <memset+0xa>
 800164c:	4770      	bx	lr
 800164e:	f803 1b01 	strb.w	r1, [r3], #1
 8001652:	e7f9      	b.n	8001648 <memset+0x4>

08001654 <__libc_init_array>:
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	2600      	movs	r6, #0
 8001658:	4d0c      	ldr	r5, [pc, #48]	@ (800168c <__libc_init_array+0x38>)
 800165a:	4c0d      	ldr	r4, [pc, #52]	@ (8001690 <__libc_init_array+0x3c>)
 800165c:	1b64      	subs	r4, r4, r5
 800165e:	10a4      	asrs	r4, r4, #2
 8001660:	42a6      	cmp	r6, r4
 8001662:	d109      	bne.n	8001678 <__libc_init_array+0x24>
 8001664:	f000 f81a 	bl	800169c <_init>
 8001668:	2600      	movs	r6, #0
 800166a:	4d0a      	ldr	r5, [pc, #40]	@ (8001694 <__libc_init_array+0x40>)
 800166c:	4c0a      	ldr	r4, [pc, #40]	@ (8001698 <__libc_init_array+0x44>)
 800166e:	1b64      	subs	r4, r4, r5
 8001670:	10a4      	asrs	r4, r4, #2
 8001672:	42a6      	cmp	r6, r4
 8001674:	d105      	bne.n	8001682 <__libc_init_array+0x2e>
 8001676:	bd70      	pop	{r4, r5, r6, pc}
 8001678:	f855 3b04 	ldr.w	r3, [r5], #4
 800167c:	4798      	blx	r3
 800167e:	3601      	adds	r6, #1
 8001680:	e7ee      	b.n	8001660 <__libc_init_array+0xc>
 8001682:	f855 3b04 	ldr.w	r3, [r5], #4
 8001686:	4798      	blx	r3
 8001688:	3601      	adds	r6, #1
 800168a:	e7f2      	b.n	8001672 <__libc_init_array+0x1e>
 800168c:	080016d8 	.word	0x080016d8
 8001690:	080016d8 	.word	0x080016d8
 8001694:	080016d8 	.word	0x080016d8
 8001698:	080016dc 	.word	0x080016dc

0800169c <_init>:
 800169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169e:	bf00      	nop
 80016a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016a2:	bc08      	pop	{r3}
 80016a4:	469e      	mov	lr, r3
 80016a6:	4770      	bx	lr

080016a8 <_fini>:
 80016a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016aa:	bf00      	nop
 80016ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ae:	bc08      	pop	{r3}
 80016b0:	469e      	mov	lr, r3
 80016b2:	4770      	bx	lr
